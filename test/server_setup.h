#ifndef XTT_SERVER_SETUP_H
#define XTT_SERVER_SETUP_H
#pragma once

#ifdef __cplusplus
extern "C" {
#endif


struct xtt_server_ctxhelper{
    unsigned char in[MAX_HANDSHAKE_CLIENT_MESSAGE_LENGTH];
    unsigned char out[MAX_HANDSHAKE_SERVER_MESSAGE_LENGTH];
    struct xtt_server_handshake_context ctx;
    unsigned char *io_ptr;
    uint16_t bytes_requested;
    xtt_return_code_type rc;
    struct xtt_server_cookie_context cookie_ctx;
    struct xtt_server_certificate_context cert_ctx;
    struct xtt_group_public_key_context group_pub_key_ctx;
};

void setup_server_input(struct xtt_server_ctxhelper *server){

    const xtt_daa_group_pub_key_lrsw gpk={.data={
        0x04, 0x73, 0x64, 0xff, 0x42, 0xe1, 0x07, 0x6a, 0xa2, 0x92, 0xe9, 0x56,
        0x1f, 0xe9, 0x6e, 0x08, 0xca, 0x0f, 0x52, 0x56, 0xa7, 0xf6, 0x14, 0xbc,
        0xed, 0x24, 0x6e, 0x1b, 0x5f, 0x02, 0xcc, 0x29, 0x32, 0x4c, 0x54, 0x63,
        0xaf, 0x7d, 0xda, 0xd9, 0x50, 0xf9, 0x73, 0xe5, 0x25, 0x0a, 0x04, 0x1d,
        0x2a, 0x2f, 0xdc, 0x5f, 0xcb, 0x46, 0x69, 0x6a, 0xe8, 0x90, 0x76, 0x74,
        0xdd, 0xd2, 0x76, 0xf0, 0xa6, 0xef, 0xab, 0x22, 0x2b, 0x6a, 0x34, 0x37,
        0x3b, 0xf6, 0x22, 0xf0, 0x87, 0xf2, 0x9b, 0x6f, 0x2e, 0xa7, 0x57, 0x65,
        0x7b, 0xd6, 0xc9, 0x04, 0x9a, 0x15, 0xff, 0x50, 0x5a, 0x61, 0xa3, 0x97,
        0xe0, 0x43, 0x1b, 0x15, 0xb6, 0xf0, 0x5e, 0xba, 0x4a, 0xf2, 0x9b, 0xca,
        0xd7, 0xd9, 0x6c, 0xbd, 0x15, 0x90, 0x79, 0x25, 0x3b, 0x44, 0x4e, 0xe8,
        0xd4, 0xff, 0x57, 0x52, 0x93, 0xe3, 0xe4, 0x84, 0x04, 0x04, 0x70, 0xe2,
        0x7d, 0x8a, 0x09, 0x34, 0x24, 0x58, 0x3c, 0xaa, 0x6a, 0xb8, 0x64, 0x57,
        0xce, 0x7d, 0x54, 0xd1, 0x4f, 0x04, 0xba, 0xd0, 0xf6, 0x17, 0xd5, 0xe9,
        0xce, 0x45, 0x30, 0xdf, 0xae, 0x81, 0xd2, 0xf4, 0x8f, 0x32, 0xa9, 0xbe,
        0xd3, 0x52, 0x31, 0x49, 0x04, 0x5a, 0x36, 0x33, 0x1d, 0xf5, 0xed, 0xe6,
        0x00, 0xe8, 0x60, 0x16, 0xba, 0x48, 0x29, 0x61, 0x52, 0x97, 0x94, 0xf3,
        0x7f, 0x5e, 0x60, 0x20, 0x0f, 0x9c, 0x77, 0x65, 0xc1, 0x31, 0xdb, 0x74,
        0xdc, 0xa0, 0xf1, 0xd0, 0xe2, 0x04, 0x2b, 0x76, 0xba, 0xaa, 0x88, 0x06,
        0x1c, 0xc1, 0x3a, 0xd3, 0x29, 0x5d, 0xa2, 0xcc, 0xbd, 0xd3, 0x8d, 0xab,
        0x99, 0xd2, 0x8f, 0x29, 0x0e, 0xd5, 0x16, 0x4b, 0x4b, 0x22, 0x39, 0x43,
        0xc1, 0x38, 0x6e, 0x5a, 0x40, 0xa1, 0x37, 0xd3, 0xf7, 0xb4, 0x4a, 0xe7,
        0xb1, 0x48, 0x77, 0xba, 0x97, 0x65}};

    const unsigned char serialized_certificate[XTT_SERVER_CERTIFICATE_ECDSAP256_LENGTH] = {
    0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x31, 0x32, 0x31, 0x30, 0x30, 0x31, 0x32, 0x33, 0x31,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x31, 0x87, 0x27, 0x21, 0xbc, 0xe2, 0x7d, 0x41, 0x4f,
    0x08, 0x23, 0xe2, 0x7c, 0xcc, 0x40, 0x5d, 0x96, 0xa6, 0x3a, 0xb9, 0xbd,
    0x82, 0x00, 0x0b, 0x1b, 0x5b, 0xce, 0x13, 0x85, 0x4f, 0xd7, 0x50, 0xa9,
    0xea, 0x13, 0xb9, 0x91, 0xaa, 0xe6, 0x89, 0x07, 0xab, 0xa7, 0x9d, 0x4c,
    0x1b, 0xff, 0x8c, 0xdf, 0x09, 0xe9, 0xef, 0x18, 0xf5, 0x92, 0x8e, 0x77,
    0x64, 0xd7, 0x98, 0xfa, 0x56, 0xae, 0x58, 0x5f, 0x3b, 0xb2, 0x90, 0xe9,
    0x13, 0xfb, 0xd5, 0x17, 0x23, 0xcc, 0x7c, 0x7e, 0xc1, 0x84, 0xbd, 0x06,
    0xee, 0xbd, 0x97, 0x75, 0x56, 0x58, 0x5b, 0x44, 0x93, 0xd5, 0x76, 0x6a,
    0x32, 0x10, 0x97, 0x05};

    const xtt_ecdsap256_priv_key private_key_s = {.data = {0x5a, 0xba, 0x8a, 0x98, 0x5e, 0xfc, 0xee, 0xd5, 0x08, 0x1d, 0x1c, 0x45, 0x84, 0xd5, 0x34,
    0x73, 0x8b, 0x1d, 0x1d, 0xb5, 0x65, 0xb9, 0xe3, 0x19, 0x8d, 0x08, 0x86, 0x12, 0x7d, 0x2d,
    0x88, 0x23}}; //taken out because of ecdsa

    const unsigned char basename[] = {0x42, 0x41, 0x53, 0x45, 0x4e, 0x41, 0x4d, 0x45};
    uint16_t basename_length = sizeof(basename);

    server->rc = xtt_initialize_group_public_key_context_lrsw(&server->group_pub_key_ctx, basename, basename_length, &gpk);
    TEST_ASSERT(server->rc == XTT_RETURN_SUCCESS);

    server->rc = xtt_initialize_server_certificate_context_ecdsap256(&server->cert_ctx, serialized_certificate, &private_key_s);
    TEST_ASSERT(server->rc == XTT_RETURN_SUCCESS);
    server->rc = xtt_initialize_server_cookie_context(&server->cookie_ctx);
    TEST_ASSERT(server->rc == XTT_RETURN_SUCCESS);

    server->rc = xtt_initialize_server_handshake_context(&server->ctx, server->in, sizeof(server->in), server->out, sizeof(server->out));
    EXPECT_EQ(server->rc, XTT_RETURN_SUCCESS);
}

#ifdef __cplusplus
}
#endif

#endif
