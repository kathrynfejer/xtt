#include <xtt.h>
#include <sodium.h>

#include <ecdaa.h>

#include "test-utils.h"

#include "../src/internal/message_utils.h"
#include "../src/internal/byte_utils.h"

#include <string.h>
#include <stdint.h>
#include <stdio.h>
#include <assert.h>
#include <stdlib.h>

#include <xtt/context.h>
#include <xtt/crypto_types.h>
#include <xtt/return_codes.h>

struct xtt_server_ctxhelper{
  unsigned char in[MAX_HANDSHAKE_CLIENT_MESSAGE_LENGTH];
  unsigned char out[MAX_HANDSHAKE_SERVER_MESSAGE_LENGTH];
  struct xtt_server_handshake_context ctx;
  unsigned char *io_ptr;
  uint16_t bytes_requested;
  xtt_return_code_type rc;
  struct xtt_server_cookie_context cookie_ctx;
};

void setup_server_input(struct xtt_server_ctxhelper* server,
                          struct xtt_server_certificate_context* cert_ctx_s,
                          struct xtt_group_public_key_context* group_pub_key_ctx,
                          const xtt_daa_group_pub_key_lrsw* gpk){

  const unsigned char serialized_certificate[XTT_SERVER_CERTIFICATE_ED25519_LENGTH]= {
  0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
  0x30, 0x30, 0x30, 0x31, 0x32, 0x31, 0x30, 0x30, 0x31, 0x32, 0x33, 0x31,
  0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
  0x30, 0x30, 0x30, 0x31, 0x87, 0x27, 0x21, 0xbc, 0xe2, 0x7d, 0x41, 0x4f,
  0x08, 0x23, 0xe2, 0x7c, 0xcc, 0x40, 0x5d, 0x96, 0xa6, 0x3a, 0xb9, 0xbd,
  0x82, 0x00, 0x0b, 0x1b, 0x5b, 0xce, 0x13, 0x85, 0x4f, 0xd7, 0x50, 0xa9,
  0xea, 0x13, 0xb9, 0x91, 0xaa, 0xe6, 0x89, 0x07, 0xab, 0xa7, 0x9d, 0x4c,
  0x1b, 0xff, 0x8c, 0xdf, 0x09, 0xe9, 0xef, 0x18, 0xf5, 0x92, 0x8e, 0x77,
  0x64, 0xd7, 0x98, 0xfa, 0x56, 0xae, 0x58, 0x5f, 0x3b, 0xb2, 0x90, 0xe9,
  0x13, 0xfb, 0xd5, 0x17, 0x23, 0xcc, 0x7c, 0x7e, 0xc1, 0x84, 0xbd, 0x06,
  0xee, 0xbd, 0x97, 0x75, 0x56, 0x58, 0x5b, 0x44, 0x93, 0xd5, 0x76, 0x6a,
  0x32, 0x10, 0x97, 0x05};


  const xtt_ed25519_priv_key private_key_s = {.data = {0x48, 0x47, 0x3b, 0x28, 0x22, 0xef, 0x93, 0x17, 0xb2, 0xef, 0x7f, 0xa5,
  0x17, 0x6f, 0x90, 0xf9, 0x62, 0xdb, 0x4c, 0xf1, 0xf0, 0xd3, 0x5f, 0x29,
  0x48, 0x98, 0x98, 0xd9, 0x21, 0xec, 0x05, 0x89, 0x87, 0x27, 0x21, 0xbc,
  0xe2, 0x7d, 0x41, 0x4f, 0x08, 0x23, 0xe2, 0x7c, 0xcc, 0x40, 0x5d, 0x96,
  0xa6, 0x3a, 0xb9, 0xbd, 0x82, 0x00, 0x0b, 0x1b, 0x5b, 0xce, 0x13, 0x85,
  0x4f, 0xd7, 0x50, 0xa9}};

  // struct xtt_group_public_key_context group_pub_key_ctx;
  // struct xtt_client_group_context group_ctx;

  xtt_ed25519_pub_key servers_pub_key;
  //xtt_certificate_expiry expiry;
  xtt_certificate_root_id roots_id;
  //xtt_ed25519_priv_key roots_priv_key;



  const unsigned char basename[]={0x42, 0x41, 0x53, 0x45, 0x4e, 0x41, 0x4d, 0x45};
  uint16_t basename_length = 8;


  server->rc=xtt_initialize_group_public_key_context_lrsw(group_pub_key_ctx, basename, basename_length, gpk);
  printf("initialize group public key ctx: %s\n", xtt_strerror(server->rc));
  assert(server->rc==XTT_RETURN_SUCCESS);

  server->rc = xtt_initialize_server_certificate_context_ed25519(cert_ctx_s, serialized_certificate, &private_key_s);
  printf("init server cert ctx: %s\n", xtt_strerror(server->rc));
  assert(server->rc==XTT_RETURN_SUCCESS);
  server->rc= xtt_initialize_server_cookie_context(&server->cookie_ctx);
  assert(server->rc==XTT_RETURN_SUCCESS);

  struct xtt_server_root_certificate_context server_root_cert;
  server->rc=xtt_initialize_server_root_certificate_context_ed25519(&server_root_cert, &roots_id, &servers_pub_key);
  printf("initialize server root cert: %s\n", xtt_strerror(server->rc));
  assert(server->rc==XTT_RETURN_SUCCESS);
}
